#/* $begin absrev-ys */
##################################################################
# absrev.ys - Reverse a src block of len words to dst.
# Return the sum of absolute values of words contained in src.
#
# Lutfullah Erkaya 2448363
# todo: Describe how and why you modified the baseline code.
# beginning: 17.83 cpe
# 17.53 after multiplying %rcx by two instead of adding one by one
# 15.46 after using leaq for constant substraction and addition
# 14.42 after substracting negative value from sum instead of taking absolute value
# 13.94 after updating loop variables before the sum addition and  using duplicate code instead of jumping to the Negative branch.
# 12.72 after introducing 2x1 unrolling but calculating the abs values inside the loop with conditional moves instead of subtracing if negative. i tested that subtracting when negative might be more effective.
# 12.28 after using jumps instead of conditional move for abs value. finally i started to get non-zero points :)
# 12.43 after doing 2x2 unrolling. increasing the accumulators didn't make it more efficient but I am keeping it for now. maybe I have to look at the pipeline file.
# 11.50 after doing 4x2 unrolling.
# 11.40 after doing 8x2 unrolling. it wont get any faster than this unrolling. maybe i can try also unrolling smaller than 8 in another layer idk i think i should look for other optimization opportunities. it should get me 1.16 points actually, i calculated it. it is worth it to do another layer of 3x1 on the remaining un-unrolled 7 elements.

##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
absrev:
##################################################################
# You can modify this portion
    # Loop header
    xorq %rax, %rax    	# sum1 = 0;
	xorq %rbp, %rbp		# sum2 = 0;
    
    # all this for dst_rev = dst + len - 1
    xorq %rcx, %rcx     	# zero rcx
    addq %rdx, %rcx     	# rcx = len
    addq %rcx, %rcx     	# rcx = 2*len
    addq %rcx, %rcx   1  	# rcx = 4*len
    addq %rcx, %rcx     	# rcx = 8*len
    
    leaq $-8(%rcx), %rcx    # rcx -= 8
    addq %rsi, %rcx     	# add dst. finally got dst_rev = dst + len - 1
	

    icmpq $7, %rdx    		# len <= 7?
    jle UnrolledDone		# if so, goto Done:
UnrolledLoop:    
    mrmovq (%rdi), %r10 	# read val from src...
    rmmovq %r10, (%rcx) 	# ...and store it to dst
    mrmovq $8(%rdi), %r11 	# read val from src+1...
    rmmovq %r11, $-8(%rcx) 	# ...and store it to dst-1


	andq %r10, %r10    		# val >= 0?
    jge IfPositive1        	# if so, add to accumulator
	subq %r10, %rax			# sum1 -= negval
	jmp Continue1
IfPositive1:
	addq %r10, %rax			# sum1 += posval
Continue1:

	andq %r11, %r11    		# val >= 0?
    jge IfPositive2        	# if so, add to accumulator
	subq %r11, %rbp			# sum2 -= negval
	jmp Continue2
IfPositive2:
	addq %r11, %rbp			# sum2 += posval
Continue2:

    mrmovq $16(%rdi), %r10 	# read val from src+2...
    rmmovq %r10, $-16(%rcx) 	# ...and store it to dst-2
    mrmovq $24(%rdi), %r11 	# read val from src+3...
    rmmovq %r11, $-24(%rcx) 	# ...and store it to dst-3


	andq %r10, %r10    		# val >= 0?
    jge IfPositive3        	# if so, add to accumulator
	subq %r10, %rax			# sum1 -= negval
	jmp Continue3
IfPositive3:
	addq %r10, %rax			# sum1 += posval
Continue3:

	andq %r11, %r11    		# val >= 0?
    jge IfPositive4        	# if so, add to accumulator
	subq %r11, %rbp			# sum2 -= negval
	jmp Continue4
IfPositive4:
	addq %r11, %rbp			# sum2 += posval
Continue4:

    mrmovq $32(%rdi), %r10 		# read val from src+4...
    rmmovq %r10, $-32(%rcx) 	# ...and store it to dst-4
    mrmovq $40(%rdi), %r11 		# read val from src+5...
    rmmovq %r11, $-40(%rcx) 	# ...and store it to dst-5


	andq %r10, %r10    		# val >= 0?
    jge IfPositive5        	# if so, add to accumulator
	subq %r10, %rax			# sum1 -= negval
	jmp Continue5
IfPositive5:
	addq %r10, %rax			# sum1 += posval
Continue5:

	andq %r11, %r11    		# val >= 0?
    jge IfPositive6        	# if so, add to accumulator
	subq %r11, %rbp			# sum2 -= negval
	jmp Continue6
IfPositive6:
	addq %r11, %rbp			# sum2 += posval
Continue6:

    mrmovq $48(%rdi), %r10 		# read val from src+6...
    rmmovq %r10, $-48(%rcx) 	# ...and store it to dst-6
    mrmovq $56(%rdi), %r11 		# read val from src+7...
    rmmovq %r11, $-56(%rcx) 	# ...and store it to dst-7


	andq %r10, %r10    		# val >= 0?
    jge IfPositive7        	# if so, add to accumulator
	subq %r10, %rax			# sum1 -= negval
	jmp Continue7
IfPositive7:
	addq %r10, %rax			# sum1 += posval
Continue7:

	andq %r11, %r11    		# val >= 0?
    jge IfPositive8        	# if so, add to accumulator
	subq %r11, %rbp			# sum2 -= negval
	jmp Continue8
IfPositive8:
	addq %r11, %rbp			# sum2 += posval
Continue8:

	leaq $-8(%rdx), %rdx	# len -= 8
    leaq $64(%rdi), %rdi	# src += 8
	leaq $-64(%rcx), %rcx	# dst_rev -= 8


    icmpq $7, %rdx    		# len > 7?
    jg UnrolledLoop			# if so, goto UnrolledLoop:
UnrolledDone:
	addq %rbp, %rax			# sum1 += sum2



    andq %rdx,%rdx    		# len <= 0?
    jle Done            	# if so, goto Done:
Loop:
	mrmovq (%rdi), %r10 	# read val from src...
    rmmovq %r10, (%rcx) 	# ...and store it to dst

	leaq $-1(%rdx), %rdx	# len -= 1
    leaq $8(%rdi), %rdi		# src += 1
	leaq $-8(%rcx), %rcx	# dst_rev -= 1

	andq %r10, %r10    		# val >= 0?
    jge IfPositive0        	# if so, skip negating
	subq %r10, %rax
	jmp Continue0
IfPositive0:
	addq %r10, %rax
Continue0:

    andq %rdx,%rdx    		# len > 0?
    jg Loop             	# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
    ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end absrev-ys */
