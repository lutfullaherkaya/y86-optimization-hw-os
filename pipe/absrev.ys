#/* $begin absrev-ys */
##################################################################
# absrev.ys - Reverse a src block of len words to dst.
# Return the sum of absolute values of words contained in src.
#
# Lutfullah Erkaya 2448363
# todo: Describe how and why you modified the baseline code.
# beginning: 17.83 cpe
# 17.53 after multiplying %rcx by two instead of adding one by one
# 15.46 after using leaq for constant substraction and addition
# 14.42 after substracting negative value from sum instead of taking absolute value
# 13.94 after updating loop variables before the sum addition and  using duplicate code instead of jumping to the Negative branch.
# 12.72 after introducing 2x1 unrolling but calculating the abs values inside the loop with conditional moves instead of subtracing if negative. i tested that subtracting when negative might be more effective.


##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
absrev:
##################################################################
# You can modify this portion
    # Loop header
    xorq %rax,%rax    	# sum = 0;

    
    # all this for dst_rev = dst + len - 1
    xorq %rcx, %rcx     	# zero rcx
    addq %rdx, %rcx     	# rcx = len
    addq %rcx, %rcx     	# rcx = 2*len
    addq %rcx, %rcx     	# rcx = 4*len
    addq %rcx, %rcx     	# rcx = 8*len
    
    leaq $-8(%rcx), %rcx    # rcx -= 8
    addq %rsi, %rcx     	# add dst. finally got dst_rev = dst + len - 1
	

    icmpq $1, %rdx    		# len > 1?
    jle UnrolledDone		# if so, goto Done:
UnrolledLoop:    
    mrmovq (%rdi), %r10 	# read val from src...
    rmmovq %r10, (%rcx) 	# ...and store it to dst
    mrmovq $8(%rdi), %r11 	# read val from src+1...
    rmmovq %r11, $-8(%rcx) 	# ...and store it to dst-1

	leaq $-2(%rdx), %rdx	# len -= 2
    leaq $16(%rdi), %rdi	# src += 2
	leaq $-16(%rcx), %rcx	# dst_rev -= 2

	rrmovq %r11, %r13
	xorq %r11, %r11
	subq %r13, %r11
	cmovl %r13, %r11

	rrmovq %r10, %r13
	xorq %r10, %r10
	subq %r13, %r10
	cmovl %r13, %r10


    addq %r10, %rax
	addq %r11, %rax

    icmpq $1, %rdx    		# len > 1?
    jg UnrolledLoop			# if so, goto UnrolledLoop:
UnrolledDone:

    andq %rdx,%rdx    		# len <= 0?
    jle Done            	# if so, goto Done:
Loop:
	mrmovq (%rdi), %r10 	# read val from src...
    rmmovq %r10, (%rcx) 	# ...and store it to dst

	leaq $-1(%rdx), %rdx	# len -= 1
    leaq $8(%rdi), %rdi		# src += 1
	leaq $-8(%rcx), %rcx	# dst_rev -= 1

    andq %r10, %r10    		# val >= 0?
    jge Positive        	# if so, skip negating
    subq %r10, %rax      	# sum -= negativevalue


	# duplicate code for avoiding the unneccesary jump to Negative
    andq %rdx, %rdx    		# len > 0?
    jg Loop             	# if so, goto Loop:
	jmp Done
Positive:
    addq %r10, %rax     	# sum += positivevalue

    andq %rdx,%rdx    		# len > 0?
    jg Loop             	# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
    ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end absrev-ys */
