                            | #/* $begin absrev-ys */
                            | ##################################################################
                            | # absrev.ys - Reverse a src block of len words to dst.
                            | # Return the sum of absolute values of words contained in src.
                            | #
                            | # Lutfullah Erkaya 2448363
                            | # todo: Describe how and why you modified the baseline code.
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | absrev:
                            | ##################################################################
                            | # You can modify this portion
                            |     # Loop header
0x000: 6300                 |     xorq %rax,%rax    	# sum = 0;
                            |     
                            |     # all this for dst_rev = dst + len - 1
0x002: 6311                 |     xorq %rcx, %rcx     # zero rcx
0x004: 6021                 |     addq %rdx, %rcx     # add len eight times
0x006: 6021                 |     addq %rdx, %rcx
0x008: 6021                 |     addq %rdx, %rcx
0x00a: 6021                 |     addq %rdx, %rcx
0x00c: 6021                 |     addq %rdx, %rcx
0x00e: 6021                 |     addq %rdx, %rcx
0x010: 6021                 |     addq %rdx, %rcx
0x012: 6021                 |     addq %rdx, %rcx
0x014: 30f80800000000000000 |     irmovq $8, %r8      # for subtracting 8
0x01e: 6061                 |     addq %rsi, %rcx     # add dst
0x020: 6181                 |     subq %r8, %rcx      # finally, rcx holds dst_rev
                            | 
0x022: 6222                 |     andq %rdx,%rdx    	# len <= 0?
0x024: 717900000000000000   |     jle Done            # if so, goto Done:
0x02d:                      | Loop:    
0x02d: 50a70000000000000000 |     mrmovq (%rdi), %r10 # read val from src...
0x037: 40a10000000000000000 |     rmmovq %r10, (%rcx) # ...and store it to dst
0x041: 62aa                 |     andq %r10, %r10    	# val >= 0?
0x043: 755200000000000000   |     jge Positive        # if so, skip negating
0x04c: 20a9                 |     rrmovq %r10, %r9    # temporary move
0x04e: 63aa                 |     xorq %r10, %r10     # zero r10
0x050: 619a                 |     subq %r9, %r10      # negation achieved!
0x052:                      | Positive:
0x052: 60a0                 |     addq %r10, %rax     # sum += absval
0x054: 30fa0100000000000000 |     irmovq $1, %r10
0x05e: 61a2                 |     subq %r10, %rdx    	# len--
0x060: 30fa0800000000000000 |     irmovq $8, %r10
0x06a: 60a7                 |     addq %r10, %rdi    	# src++
0x06c: 61a1                 |     subq %r10, %rcx    	# dst_rev--
0x06e: 6222                 |     andq %rdx,%rdx    	# len > 0?
0x070: 762d00000000000000   |     jg Loop             # if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x079:                      | Done:
0x079: 90                   |     ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x07a:                      | End:
                            | #/* $end absrev-ys */
