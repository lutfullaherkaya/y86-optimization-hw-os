# Lutfullah Erkaya
# 2448363

# Prepare the stack pointer, the arguments, and call find_max
.pos 0
    irmovq Stack, %rsp
    irmovq root, %rdi
    call max_bst
    halt

max_bst:
    xorq %rax, %rax 
    andq %rdi, %rdi     # if (!root)
    je root_is_null     #   return
    jmp check

loop:
    rrmovq %r8, %rdi    # root = right
check:
    mrmovq 16(%rdi), %r8    # right = root->right
    andq %r8, %r8           # if (right)
    jne loop                #   continue the loop

    mrmovq (%rdi), %rax

root_is_null:
    ret

# A sample eleven-element BST. Absolutely positioned
# to avoid confusion when debugging.
.pos 0x200
root:
    .quad 17
    .quad node6
    .quad node24
node6:
    .quad 6
    .quad node4
    .quad node11
node4:
    .quad 4
    .quad node3
    .quad node5
node3:
    .quad 3
    .quad 0 
    .quad 0 
node5: 
    .quad 5 
    .quad 0 # Remember that 0 is null. 
    .quad 0 
node11: 
    .quad 11 
    .quad node8 
    .quad 0 
node8: 
    .quad 8 
    .quad 0 
    .quad 0 
node24: 
    .quad 24 
    .quad node19 
    .quad node40 
node19: 
    .quad 19 
    .quad 0 
    .quad 0 
node40: 
    .quad 40 
    .quad 0 
    .quad node52 
node52: 
    .quad 52 
    .quad 0 
    .quad 0 

# Stack position, byte 0x800 far from data
    .pos 0x800
Stack:
