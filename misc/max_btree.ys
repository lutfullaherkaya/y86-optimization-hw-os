# Lutfullah Erkaya
# 2448363

# Prepare the stack pointer, the arguments, and call max_btree
.pos 0
    irmovq Stack, %rsp
    irmovq root, %rdi
    call max_btree
    halt

max_btree:
	andq   %rdi, %rdi 		# if (!root)
	je root_is_null

	pushq   %rbp			# save rbp variable
	pushq   %rbx			# save rbx variable
	rrmovq    %rdi, %rbp	# rbp = root
	mrmovq    8(%rdi), %rdi	
	call    max_btree		# rbx = max_btree(root->left);
	rrmovq    %rax, %rbx	
	mrmovq    16(%rbp), %rdi
	call    max_btree		# max_btree(root->right)
	
	#cmpq    %rax, %rbx
	pushq %rbx
	subq  %rax, %rbx
	popq  %rbx				# if (candiate > max)
	cmovl   %rax, %rbx		# 	max = candidate;
	mrmovq    0(%rbp), %rax 

	#cmpq    %rax, %rbx
	pushq %rbx
	subq  %rax, %rbx
	popq  %rbx				# if (candiate > max)
	cmovge  %rbx, %rax		# 	max = candidate;

							# load saved variables
	popq    %rbx			
	popq    %rbp
	ret

root_is_null:
	irmovq $-9223372036854775808, %rax
	ret

# A binary (not search!) tree, # absolutely positioned again. 

.pos 0x200 
root: 
    .quad 5 
    .quad node7 
    .quad node12 
node7: 
    .quad 7 
    .quad node25 
    .quad node905 
node25: 
    .quad 25 
    .quad 0 
    .quad 0 
node905: 
    .quad 905 
    .quad nodem1 
    .quad 0 
nodem1: 
    .quad -1 
    .quad 0 
    .quad 0 
node12: 
    .quad 12 
    .quad node219 
    .quad nodem10 
node219: 
    .quad 219 
    .quad 0 
    .quad 0 
nodem10: 
    .quad -10 
    .quad 0 
    .quad node331 
node331: 
    .quad 331 
    .quad 0 
    .quad 0 
 
# Stack position, byte 0xF00 far from data
.pos 0xF00
Stack:
