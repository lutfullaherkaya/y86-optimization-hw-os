# Lutfullah Erkaya
# 2448363

# Prepare the stack pointer, the arguments, and call find_max
.pos 0
    irmovq Stack, %rsp
    irmovq root, %rdi
    irmovq array, %rsi
    irmovq $8, %rdx
    call collect_into
    halt

collect_into:
        pushq   %r13
        pushq   %r12
        pushq   %rbp
        pushq   %rbx
        irmovq $8, %r8      # immediate values for using with addq and subq
        irmovq $1, %r10
        andq   %rdi, %rdi
        je      returnzero
        rrmovq    %rdi, %rbp
        rrmovq    %rsi, %r12
        rrmovq    %rdx, %rbx
        andq   %rdx, %rdx
        jle     returnzero
        mrmovq    8(%rdi), %rdi
        call    collect_into
        rrmovq    %rax, %r13
        #cmpq    %rax, %rbx
        pushq %rbx
        subq  %rax, %rbx
        popq  %rbx
        je      returnmax
        mrmovq    0(%rbp), %rax

        #rmmovq    %rax, (%r12,%r13,8)
        rrmovq %r12, %r11
        addq %r13, %r11
        addq %r13, %r11
        addq %r13, %r11
        addq %r13, %r11
        addq %r13, %r11
        addq %r13, %r11
        addq %r13, %r11
        addq %r13, %r11
        rmmovq %rax, (%r11)

        subq    %r13, %rbx

        #leaq    -1(%rbx), %rdx
        rrmovq %rbx, %rdx
        subq %r10, %rdx

        #leaq    8(%r12,%r13,8), %rsi
        rrmovq %r12, %rsi
        addq %r8, %rsi
        addq %r13, %rsi
        addq %r13, %rsi
        addq %r13, %rsi
        addq %r13, %rsi
        addq %r13, %rsi
        addq %r13, %rsi
        addq %r13, %rsi
        addq %r13, %rsi


        mrmovq    16(%rbp), %rdi
        call    collect_into
        #leaq    1(%r13,%rax), %r13
        addq %rax, %r13
        addq %r10, %r13

        jmp     returnmax
returnzero:
        irmovq    $0, %r13
returnmax:
        rrmovq    %r13, %rax
        popq    %rbx
        popq    %rbp
        popq    %r12
        popq    %r13
        ret


# A sample eleven-element BST. Absolutely positioned
# to avoid confusion when debugging.
.pos 0x200
root:
    .quad 17
    .quad node6
    .quad node24
node6:
    .quad 6
    .quad node4
    .quad node11
node4:
    .quad 4
    .quad node3
    .quad node5
node3:
    .quad 3
    .quad 0 
    .quad 0 
node5: 
    .quad 5 
    .quad 0 # Remember that 0 is null. 
    .quad 0 
node11: 
    .quad 11 
    .quad node8 
    .quad 0 
node8: 
    .quad 8 
    .quad 0 
    .quad 0 
node24: 
    .quad 24 
    .quad node19 
    .quad node40 
node19: 
    .quad 19 
    .quad 0 
    .quad 0 
node40: 
    .quad 40 
    .quad 0 
    .quad node52 
node52: 
    .quad 52 
    .quad 0 
    .quad 0 

# An array with size of 8 to put elements in:
# Make sure your code works correctly. Do not
# fill beyond the bounds of the array. You should
# see values in sorted order starting from the minimum
# of the BST, since the traversal is in-order.
.pos 0x400
array:
.quad 0
.quad 0
.quad 0
.quad 0
.quad 0
.quad 0
.quad 0
.quad 0



# Stack position, byte 0xF00 far from data
.pos 0xF00
Stack:
